/* Assignment:2
Author: arte504
*/

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

typedef enum { FALSE = 0, TRUE } BOOL;
enum { _Info = 1, _PrintFloatMax, _GetLongNumber, _MaxCountDivisors, _PrintSpecailNumbers, _AllShapes, _Exit};

// Functions name calling and data type setting 
void Menu();
void PrintMenu();
void Info();
int IsEven(int);
int IsPositive(int);
int CountDigits(int);
void PrintFloatMax();
void MaxCountDivisors();
void PrintMaxCountDivisors(int);
void PrintDivisorsVar(int);
void GetLongNumber();
void PrintSpecailNumbers();
void AllShapes();
int Triangle();
int Square();
int Rectangle();
void ShapesMenu();


int main() // The main menu function
{
	Menu();
	return 0;
}

void Menu()
{
	int opt, exit=0;
	char quit;
	printf(" Hello, this the menu of the program. Read and please choose your option:\n");
	PrintMenu();
	do
	{
		scanf("%d", &opt);
		switch (opt) // Calling for action from the menu by switch case
		{
		case _Info:
		{
			Info();
			PrintMenu();
			break;
		}
		case _PrintFloatMax:
		{
			PrintFloatMax();
			PrintMenu();
			break;
		}
		case _GetLongNumber:
		{
			GetLongNumber();
			PrintMenu();
			break;
		}
		case _MaxCountDivisors:
		{
			MaxCountDivisors();
			PrintMenu();
			break;
		}
		case _PrintSpecailNumbers:
		{
			PrintSpecailNumbers();
			PrintMenu();
			break;
		}
		case _AllShapes:
		{
			AllShapes();
			PrintMenu();
			break;
		}
		case _Exit:
		{
			exit = 1;
			break;
		}
		default:
		{
			printf(" Error: out of range!\n"); // Error massage if the choose in the switch case is out of the cases range and calling back for menu
			PrintMenu();
			break;
		}
		}
	} while (exit != 1);
	printf(" Thank you for using my program!\n Have a nice day!\n");
}

void PrintMenu()
{
	printf("\n%c[4mMenu:\n%c[0m", 27, 27);
	printf(" 1 - Info\n 2 - Print the number with the max float\n 3 - Reverse the digits and add 5\n 4 - Pick the number that has the max amount of divisors\n 5 - Print the special numbers\n 6 - Print shapes\n 7 - Exit\n");
}

void Info() // This function show us information about the number that we will give to it/
{
	int num, e, p, count;
	printf(" Please enter a number:\n");
	scanf("%d", &num);
	e = IsEven(num);
	if (e == 1)
	{
		printf(" %d is even!\n", num);
	}
	else
	{
		printf(" %d is odd!\n", num);
	}
	p = IsPositive(num);
	if (p == 1)
	{
		printf(" %d is positive!\n", num);
	}
	else
	{
		printf(" %d is negative!\n", num);
	}
	count = CountDigits(num);
	printf(" %d has %d digits!\n", num, count);
}

int IsEven(int num) // Check if the number that given in 'Info' function is even or odd
{
	int c = num, e;
	if (c % 2 == 0)
	{
		e = 1;
	}
	else
	{
		e = 0;
	}
	return e;
}

int IsPositive(int num) // Check if the number that given in 'Info' function is positive or negative
{
	int c = num, p;
	if (c > 0)
	{
		p = 1;
	}
	else
	{
		p = 0;
	}
	return p;
}

int CountDigits(int num) // Check how much digits have the number that given in 'Info' function 
{
	int c = num, flag = 0;
	while (c != 0)
	{
		c /= 10;
		flag++;
	}
	return flag;
}

int GetMantissa(float number)
{
	// Max mantissa size will be 5. 
	int counter = 5, mantissa = 0;
	for (counter; counter != 0; counter--)
	{
		mantissa *= 10;
		number *= 10;
		mantissa += (int)number % 10;
	}
	return mantissa;
}

void PrintFloatMax() // Function that check the number for the largest after floating point value
{
	// Variables for max number.
	float maxNumber = 0.0;
	int maxMantissa = 0, maxIndex = 0;
	// Variables for temp number.
	float corrNumber = 0.0;
	int corrMantissa = 0, corrIndex = 0;
	printf(" Please enter floats [to stop, enter zero]:\n");
	do
	{
		scanf("%f", &corrNumber);
		corrMantissa = GetMantissa(corrNumber); // Calls previous func
		corrIndex++;
		// Swap variables if necessary.
		if (corrMantissa > maxMantissa)
		{
			maxNumber = corrNumber;
			maxMantissa = corrMantissa;
			maxIndex = corrIndex;
		}

	} while (corrNumber != 0.0);

	printf("\n Max float: %.2f\n Index: %d\n", maxNumber, maxIndex);
}

void GetLongNumber() // Function that reverse the given number and add 5 to the the result
{
	int num, re = 0;
	printf(" Please enter a number:\n");
	scanf("%d", &num);
	re = reverse(num);
	printf(" Your reversed and +5 number is:%d\n", re+5);
}

int reverse(int num) // The reverse function it self
{
	int r = 0, re = num;
	while (re != 0)
	{
		r = r * 10;
		r = r + re % 10;
		re = re / 10;
	}
	return r;
}

void PrintMaxCountDivisors(int low, int high)
{
	int maxDivisors = 0, number = 0, tmp = 0, i = 2;
	if (low > high)
	{
		low += high;
		high = low - high;
		low -= high;
	}
	for (number = low; number <= high; number++)
	{
		tmp = GetNumOfDivs(number); // Calls the function
		if (tmp > maxDivisors) // Swap variables if necessary.
			maxDivisors = tmp;
	}
	for (number = low; number <= high; number++)
	{
		if (maxDivisors == GetNumOfDivs(number))
		{
			printf("\nThe number %d has %d divisors\n", number, maxDivisors);
			printf("The divisors:\n"); //prints the divisors
			tmp = 0;
			for (i = 2; i < number; i++)
			{
				if (number % i == 0)
				{
					tmp++;
					if (maxDivisors != tmp)
						printf("%d, ", i);
					else
						printf("%d.\n", i);
				}
			}
		}
	}
}

int GetNumOfDivs(int number) // Function that count the divs
{
	int i = 1, divisors = 0;
	for (i; i <= number; i++)
	{
		if (number % i == 0)
			divisors++;
	}
	return divisors;
}

void MaxCountDivisors() //Function that checks if the range numbers the user has entered are positive,if so then it calls PrintMaxCountDivisors
{
	int low = 0, high = 0, showError = FALSE;
	do
	{
		showError = FALSE;
			printf("Please enter two positive numbers.\n");
			printf("Low:\n");
			scanf("%d", &low);
			printf("High:\n");
			scanf("%d", &high);
		if (low < 0 || high < low)
		{
			showError = TRUE;
		}
		if (showError == TRUE)
		{
			printf("\nPlease follow the instructions!\n");
		}
	} while (showError == TRUE);
	PrintMaxCountDivisors(low, high); // Calling function
}

void PrintSpecailNumbers()
{
	int dig1, dig2, dig3, dig4, flag = 0, temp=0;
	for (int a = 1000; a <= 9999; a++)
	{
		dig1 = a / 1000;
		dig2 = (a / 100) % 10;
		dig3 = (a / 10) % 10;
		dig4 = a % 10;
		if (dig1 != dig2 && dig1 != dig3 && dig1 != dig4 && dig2 != dig1 && dig2 != dig3 && dig2 != dig4 && dig3 != dig1 && dig3 != dig2 && dig3 != dig4 && dig4 != dig1 && dig4 != dig2 && dig4 != dig3)
		{
			flag = CountSpecialNumbers(flag); // Calling function
			if (temp != flag)
			{
				printf("%d, ", a);
				temp++;
			}
			if(temp+1 == flag)
			{
				printf(" %d.\n", a);
			}
		}
	}
	printf("\n There are %d special numbers\n", flag);
}

int CountSpecialNumbers(int flag)
{
	int count = flag;
	count++;
	return count;
}

void AllShapes() // Menu function of shapes drawing
{
	int shape = 0, exit = 0;
	printf("%c[4mChoose a shape:\n%c[0m", 27, 27);
	printf(" 1 - Triangle\n 2 - Square\n 3 - Rectangle\n 4 - Exit\n");
	do{
		scanf("%d", &shape);
		switch (shape)
		{
		case 1:
		{
			Triangle(); 
			ShapesMenu();
			break;
		}
		case 2:
		{
			Square();
			ShapesMenu();
			break;
		}
		case 3:
		{
			Rectangle();
			ShapesMenu();
			break;
		}
		case 4:
		{
			exit = 1;
			break;
		}
		default:
		{
			printf(" ERROR: Wrong shape number. Enter correct option!\n");
			ShapesMenu();
			break;
		}
		}
	} while (exit != 1);
}

void ShapesMenu()
{
	printf("%c[4mChoose a shape:\n%c[0m", 27, 27);
	printf(" 1 - Triangle\n 2 - Square\n 3 - Rectangle\n 4 - Exit\n");
}

int Triangle() // Triangle drawing function
{
	int size, i, j;
	printf(" Enter the size:\n");
	do
	{
		scanf("%d", &size);
		if (size < 0)
			printf("Error... Please enter positive value!\n");
		for (i = 1; i <= size; ++i)
		{
			for (j = 1; j <= i; ++j)
				printf(" * ");
			printf("\n");
		}
	} while (size < 0);
}

int Square() // Square drawing function
{
	int size, i, j;
	printf(" Enter the size:\n");
	do 
	{
		scanf("%d", &size);
		if (size < 0)
			printf("Error... Please enter positive value!\n");
		for (i = 1; i <= size; i++)
		{
			for (j = 1; j <= size; j++)
			{
				if (i == 1 || i == size || j == 1 || j == size)
					printf(" *");
				else
					printf("  ");
			}
			printf("\n");
		}
	}while (size < 0);
}

int Rectangle() // Rectangle drawing function
{
	int height, width, i, j;
	do
	{
		printf(" Enter the height:\n");
		scanf("%d", &height);
		printf(" Enter the width:\n");
		scanf("%d", &width);
		if (height < 0)
		{
			printf("Error... Please enter positive value for height!\n");
			printf(" Enter the height:\n");
			scanf("%d", &height);
		}
		if(width < 0)
		{
			printf("Error... Please enter positive value for height!\n");
			printf(" Enter the width:\n");
			scanf("%d", &width);
		}
		for (i = 1; i <= height; i++)
		{
			for (j = 1; j <= width; j++)
			{
				if (i == 1 || i == height || j == 1 || j == width)
					printf(" *");
				else
					printf("  ");
			}
			printf("\n");
		}
	} while (height < 0 && width < 0);
}
